/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */
plugins {
    id 'application'
    id 'java'
    id "com.palantir.docker" version "0.22.1"
    id "com.palantir.docker-run" version "0.22.1"

}
sourceCompatibility = 1.8
version = '1.0.0'

repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dirs '../../src_repo/apache_cxf/lib'
    }
}

dependencies {
    compile 'org.apache.cxf:cxf-core:3.4.2'
    compile 'org.apache.cxf:cxf-rt-frontend-jaxrs:3.+'
    compile 'org.apache.cxf:cxf-rt-rs-client:3.+'
    compile 'org.apache.cxf:cxf-rt-transports-http-jetty:3.+'
    compile 'org.apache.httpcomponents:httpclient:4.5.+'
    compile 'org.springframework:spring-context:5.2.+'
    //compile 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    compile 'javax.xml.bind:jaxb-api:2.1'
    compile 'jakarta.annotation:jakarta.annotation-api:1.+'
    compile 'jakarta.xml.ws:jakarta.xml.ws-api:2.3.3'
    compile 'jakarta.activation:jakarta.activation-api:1.2.2'
    compile 'jakarta.jws:jakarta.jws-api:1.1.1'
    compile 'com.sun.xml.messaging.saaj:saaj-impl:1.5.2'
    compile 'com.sun.xml.bind:jaxb-impl:2.2.1'
    compile 'org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1'
    compile 'org.glassfish.jaxb:jaxb-runtime:3.+'
    compile 'org.glassfish.jaxb:jaxb-xjc:3.+'
    compile 'org.glassfish.corba:glassfish-corba-orb:4.2.2'
    compile 'org.apache.cxf:cxf-rt-rs-extension-providers:3.4.2'
    compile 'org.codehaus.jettison:jettison:1.4.0'
    //compile 'jakarta.ws.rs:jakarta.ws.rs-api:2.1.6'
    compile 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    compile 'mysql:mysql-connector-java:8.0.23'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/


application {
    mainClass = 'odu.edu.loadin.webapi.Server'
}



docker {
    name "webapi"
    dockerfile file('test.dockerfile')
    files 'output.txt','test.dockerfile'
}

dockerRun{
    name "webapi"
    image "webapi"
    ports '8080:8080'
    clean true
}


//jar{
//    manifest {
//        attributes(
//                'Main-Class': "odu.edu.loadin.webapi.Server"
//        )
//    }
//    //includes the jar files of third party libraries
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Load.In Web Api',
                'Implementation-Version': '1.0.0',
                'Main-Class': 'odu.edu.loadin.webapi.Server'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}